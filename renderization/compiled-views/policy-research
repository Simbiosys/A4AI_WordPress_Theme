<?php return function ($in, $debugopt = 1) {
    $cx = Array(
        'flags' => Array(
            'jstrue' => false,
            'jsobj' => false,
            'spvar' => false,
            'prop' => false,
            'method' => false,
            'mustlok' => false,
            'mustsec' => false,
            'debug' => $debugopt,
        ),
        'helpers' => Array(),
        'blockhelpers' => Array(),
        'hbhelpers' => Array(),
        'partials' => Array(),
        'scopes' => Array($in),
        'sp_vars' => Array(),
'funcs' => Array(
    'sec' => function ($cx, $v, $in, $each, $cb, $inv = null) {
        $isary = is_array($v);
        $loop = $each;
        $keys = null;
        $last = null;
        $is_obj = false;

        if ($isary && $inv !== null && count($v) === 0) {
            return $inv($cx, $in);
        }
        if (!$loop && $isary) {
            $keys = array_keys($v);
            $loop = (count(array_diff_key($v, array_keys($keys))) == 0);
            $is_obj = !$loop;
        }
        if ($loop && $isary) {
            if ($each) {
                if ($keys == null) {
                    $keys = array_keys($v);
                    $is_obj = (count(array_diff_key($v, array_keys($keys))) > 0);
                }
            }
            $ret = Array();
            $cx['scopes'][] = $in;
            $i = 0;
            if ($cx['flags']['spvar']) {
                $last = count($keys) - 1;
            }
            foreach ($v as $index => $raw) {
                if ($cx['flags']['spvar']) {
                    $cx['sp_vars']['first'] = ($i === 0);
                    if ($is_obj) {
                        $cx['sp_vars']['key'] = $index;
                        $cx['sp_vars']['index'] = $i;
                    } else {
                        $cx['sp_vars']['last'] = ($i == $last);
                        $cx['sp_vars']['index'] = $index;
                    }
                $i++;
                }
                $ret[] = $cb($cx, $raw);
            }
            if ($cx['flags']['spvar']) {
                if ($is_obj) {
                    unset($cx['sp_vars']['key']);
                } else {
                    unset($cx['sp_vars']['last']);
                }
                unset($cx['sp_vars']['index']);
                unset($cx['sp_vars']['first']);
            }
            array_pop($cx['scopes']);
            return join('', $ret);
        }
        if ($each) {
            if ($inv !== null) {
                $cx['scopes'][] = $in;
                $ret = $inv($cx, $v);
                array_pop($cx['scopes']);
                return $ret;
            }
            return '';
        }
        if ($isary) {
            if ($cx['flags']['mustsec']) {
                $cx['scopes'][] = $v;
            }
            $ret = $cb($cx, $v);
            if ($cx['flags']['mustsec']) {
                array_pop($cx['scopes']);
            }
            return $ret;
        }

        if ($v === true) {
            return $cb($cx, $in);
        } 

        if (!is_null($v) && ($v !== false)) {
            return $cb($cx, $v);
        }

        if ($inv !== null) {
            return $inv($cx, $in);
        }

        return '';
    },
)

    );
    return '<link rel="stylesheet" type="text/css" href="'.htmlentities((string)((isset($in['path']) && is_array($in)) ? $in['path'] : null), ENT_QUOTES, 'UTF-8').'/styles/flags.css">
<input type="hidden" id="path" value="'.htmlentities((string)((isset($in['path']) && is_array($in)) ? $in['path'] : null), ENT_QUOTES, 'UTF-8').'"></input>

<article class="post static_page policy-post">
  <h2>'.$cx['funcs']['sec']($cx, ((isset($in['labels']) && is_array($in)) ? $in['labels'] : null), $in, false, function($cx, $in) {return ''.htmlentities((string)((isset($in['policy_research']) && is_array($in)) ? $in['policy_research'] : null), ENT_QUOTES, 'UTF-8').'';}).'</h2>
  <div class="introduction">
    '.((isset($in['data']['policy']['introduction']) && is_array($in['data']['policy'])) ? $in['data']['policy']['introduction'] : null).'
  </div>
  <div class="entry policy">
    <h3 id="best_practices">'.$cx['funcs']['sec']($cx, ((isset($in['labels']) && is_array($in)) ? $in['labels'] : null), $in, false, function($cx, $in) {return ''.htmlentities((string)((isset($in['policy_best_practices']) && is_array($in)) ? $in['policy_best_practices'] : null), ENT_QUOTES, 'UTF-8').'';}).'</h3>
    <div class="articles policy-practices">
      '.((isset($in['data']['policy']['practices']) && is_array($in['data']['policy'])) ? $in['data']['policy']['practices'] : null).'
    </div>
    <h3 id="affordability_report">'.$cx['funcs']['sec']($cx, ((isset($in['labels']) && is_array($in)) ? $in['labels'] : null), $in, false, function($cx, $in) {return ''.htmlentities((string)((isset($in['policy_affordability_report']) && is_array($in)) ? $in['policy_affordability_report'] : null), ENT_QUOTES, 'UTF-8').'';}).'</h3>
    <div class="articles policy-report">
      '.((isset($in['data']['policy']['report']) && is_array($in['data']['policy'])) ? $in['data']['policy']['report'] : null).'
    </div>
    <h3 id="case_studies">'.$cx['funcs']['sec']($cx, ((isset($in['labels']) && is_array($in)) ? $in['labels'] : null), $in, false, function($cx, $in) {return ''.htmlentities((string)((isset($in['policy_case_studies']) && is_array($in)) ? $in['policy_case_studies'] : null), ENT_QUOTES, 'UTF-8').'';}).'</h3>
    <div class="articles policy-case">
      '.((isset($in['data']['policy']['case']) && is_array($in['data']['policy'])) ? $in['data']['policy']['case'] : null).'
    </div>
    <h3 id="the_knowledge_bank">'.$cx['funcs']['sec']($cx, ((isset($in['labels']) && is_array($in)) ? $in['labels'] : null), $in, false, function($cx, $in) {return ''.htmlentities((string)((isset($in['policy_the_knowledge_bank']) && is_array($in)) ? $in['policy_the_knowledge_bank'] : null), ENT_QUOTES, 'UTF-8').'';}).'</h3>
    <div class="articles policy-bank">
      '.((isset($in['data']['policy']['bank']) && is_array($in['data']['policy'])) ? $in['data']['policy']['bank'] : null).'
    </div>
  </div>

</article>
';
}
?>